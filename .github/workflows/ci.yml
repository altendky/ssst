name: CI
'on':
  push:
    branches:
    - main
    tags:
    - v*
  pull_request:
    branches:
    - '*'
  schedule:
  - cron: 14 5 * * *
jobs:
  check_workflow:
    runs-on: ${{ matrix.os.runs-on }}
    container: ${{ matrix.os.container[matrix.python.docker] }}
    name: Check workflow
    strategy:
      fail-fast: false
      matrix:
        os:
        - name: Linux
          runs-on: ubuntu-latest
          python_platform: linux
          matrix: linux
          container:
            2.7: docker://python:2.7-buster
            3.5: docker://python:3.5-buster
            3.6: docker://python:3.6-buster
            3.7: docker://python:3.7-buster
            3.8: docker://python:3.8-buster
            3.9: docker://python:3.9-buster
            pypy2: docker://pypy:2-jessie
            pypy3: docker://pypy:3-stretch
        python:
        - name: CPython 3.8
          tox: py38
          action: 3.8
          docker: 3.8
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up ${{ matrix.python.name }}
      if: job.container == ''
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python.action }}.0-alpha - ${{ matrix.python.action
          }}.X
        architecture: ${{ matrix.arch.action }}
    - name: Install tox
      run: 'pip install --upgrade pip setuptools wheel

        pip install pyyaml~=5.4

        '
    - name: Generate
      run: 'python .github/resolve_anchors.py

        '
    - name: Check
      run: 'git diff --exit-code

        '
  test:
    runs-on: ${{ matrix.os.runs-on }}
    container: ${{ matrix.os.container[matrix.python.docker] }}
    name: ${{ matrix.task.name }} - ${{ matrix.os.name }} ${{ matrix.qt_library.name
      }} ${{ matrix.python.name }} ${{ matrix.arch.name }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - name: Linux
          runs-on: ubuntu-latest
          python_platform: linux
          matrix: linux
          container:
            2.7: docker://python:2.7-buster
            3.5: docker://python:3.5-buster
            3.6: docker://python:3.6-buster
            3.7: docker://python:3.7-buster
            3.8: docker://python:3.8-buster
            3.9: docker://python:3.9-buster
            pypy2: docker://pypy:2-jessie
            pypy3: docker://pypy:3-stretch
        - name: Windows
          runs-on: windows-latest
          python_platform: win32
          matrix: windows
        - name: macOS
          runs-on: macos-latest
          python_platform: darwin
          matrix: macos
        qt_library:
        - pyqt5: null
          name: PyQt5
          tox: pyqt5
        - pyside2: null
          name: PySide2
          tox: pyside2
        exclude:
        - os:
            matrix: linux
          arch:
            matrix: x86
        - os:
            matrix: macos
          arch:
            matrix: x86
        task:
        - name: Test
          tox: test
          coverage: true
        python:
        - name: CPython 3.6
          tox: py36
          action: 3.6
          docker: 3.6
        - name: CPython 3.9
          tox: py39
          action: 3.9
          docker: 3.9
        arch:
        - name: x64
          action: x64
          matrix: x64
    env:
      JOB_NAME: ${{ matrix.task.name }} - ${{ matrix.os.name }} ${{ matrix.qt_library.name
        }} ${{ matrix.python.name }} ${{ matrix.arch.name }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up ${{ matrix.python.name }}
      if: job.container == ''
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python.action }}.0-alpha - ${{ matrix.python.action
          }}.X
        architecture: ${{ matrix.arch.action }}
    - name: Install Linux Qt5 dependencies
      if: matrix.os.python_platform == 'linux'
      run: 'apt-get update --yes

        apt-get install --yes libgl1 libgl1-mesa-dev xvfb x11-utils libdbus-1-3 libxkbcommon-x11-0
        libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        libxcb-xinerama0 libxcb-xfixes0

        '
    - uses: altendky/QTBUG-88688-libxcb-util@v2
      if: matrix.os.matrix == 'linux'
    - name: Install tox
      run: 'pip install --upgrade pip setuptools wheel

        pip install --upgrade tox

        '
    - uses: twisted/python-info-action@v1.0.1
    - name: Setup tox environment
      run: 'tox -vv --notest -e ${{ matrix.task.tox }}-${{ matrix.python.tox }}-${{
        matrix.qt_library.tox }}

        '
    - name: Test
      run: 'tox -e ${{ matrix.task.tox }}-${{ matrix.python.tox }}-${{ matrix.qt_library.tox
        }}      - *process_coverage

        '
    - name: Publish Coverage
      if: matrix.task.coverage
      uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: coverage_reports/*
  check:
    runs-on: ${{ matrix.os.runs-on }}
    container: ${{ matrix.os.container[matrix.python.docker] }}
    name: ${{ matrix.task.name }}
    strategy:
      fail-fast: false
      matrix:
        task:
        - name: Black
          tox: black
          coverage: false
        - name: Mypy
          tox: mypy
          coverage: false
        os:
        - name: Linux
          runs-on: ubuntu-latest
          python_platform: linux
          matrix: linux
          container:
            2.7: docker://python:2.7-buster
            3.5: docker://python:3.5-buster
            3.6: docker://python:3.6-buster
            3.7: docker://python:3.7-buster
            3.8: docker://python:3.8-buster
            3.9: docker://python:3.9-buster
            pypy2: docker://pypy:2-jessie
            pypy3: docker://pypy:3-stretch
        python:
        - name: CPython 3.8
          tox: py38
          action: 3.8
          docker: 3.8
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up ${{ matrix.python.name }}
      if: job.container == ''
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python.action }}.0-alpha - ${{ matrix.python.action
          }}.X
        architecture: ${{ matrix.arch.action }}
    - name: Install tox
      run: 'pip install --upgrade pip setuptools wheel

        pip install --upgrade tox

        '
    - uses: twisted/python-info-action@v1.0.1
    - name: Setup tox environment
      run: 'tox -vv --notest -e ${{ matrix.task.tox }}

        '
    - name: Test
      run: 'tox -e ${{ matrix.task.tox }}

        '
  freeze:
    runs-on: ${{ matrix.os.runs-on }}
    container: ${{ matrix.os.container[matrix.python.docker] }}
    name: ${{ matrix.task.name }} - ${{ matrix.os.name }} ${{ matrix.qt_library.name
      }} ${{ matrix.python.name }} ${{ matrix.arch.name }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - name: Linux
          runs-on: ubuntu-latest
          python_platform: linux
          matrix: linux
          container:
            2.7: docker://python:2.7-buster
            3.5: docker://python:3.5-buster
            3.6: docker://python:3.6-buster
            3.7: docker://python:3.7-buster
            3.8: docker://python:3.8-buster
            3.9: docker://python:3.9-buster
            pypy2: docker://pypy:2-jessie
            pypy3: docker://pypy:3-stretch
        - name: Windows
          runs-on: windows-latest
          python_platform: win32
          matrix: windows
        - name: macOS
          runs-on: macos-latest
          python_platform: darwin
          matrix: macos
        qt_library:
        - pyqt5: null
          name: PyQt5
          tox: pyqt5
        - pyside2: null
          name: PySide2
          tox: pyside2
        exclude:
        - os:
            matrix: linux
          arch:
            matrix: x86
        - os:
            matrix: macos
          arch:
            matrix: x86
        task:
        - name: PyInstaller
          tox: pyinstaller
          coverage: true
        python:
        - name: CPython 3.9
          tox: py39
          action: 3.9
          docker: 3.9
        arch:
        - name: x64
          action: x64
          matrix: x64
    env:
      JOB_NAME: ${{ matrix.task.name }} - ${{ matrix.os.name }} ${{ matrix.qt_library.name
        }} ${{ matrix.python.name }} ${{ matrix.arch.name }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up ${{ matrix.python.name }}
      if: job.container == ''
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python.action }}.0-alpha - ${{ matrix.python.action
          }}.X
        architecture: ${{ matrix.arch.action }}
    - name: Install Linux Qt5 dependencies
      if: matrix.os.python_platform == 'linux'
      run: 'apt-get update --yes

        apt-get install --yes libgl1 libgl1-mesa-dev xvfb x11-utils libdbus-1-3 libxkbcommon-x11-0
        libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        libxcb-xinerama0 libxcb-xfixes0

        '
    - uses: altendky/QTBUG-88688-libxcb-util@v2
      if: matrix.os.matrix == 'linux'
    - name: Install tox
      run: 'pip install --upgrade pip setuptools wheel

        pip install --upgrade tox

        '
    - uses: twisted/python-info-action@v1.0.1
    - name: Setup tox freeze environment
      run: 'tox -vv --notest -e freeze-${{ matrix.task.tox }}-${{ matrix.qt_library.tox
        }}

        '
    - name: Freeze
      run: 'tox -e freeze-${{ matrix.task.tox }}-${{ matrix.qt_library.tox }}

        '
    - name: Setup tox test environment
      run: 'tox -vv --notest -e test-frozen-${{ matrix.qt_library.tox }}

        '
    - name: Test
      run: 'tox -e test-frozen-${{ matrix.qt_library.tox }}

        '
    - name: Process Coverage
      if: matrix.task.coverage
      run: 'mkdir coverage_reports

        cp .coverage "coverage_reports/coverage.${{ env.JOB_NAME }}"

        cp coverage.xml "coverage_reports/coverage.${{ env.JOB_NAME }}.xml"

        tox -v -e codecov

        '
    - name: Publish Coverage
      if: matrix.task.coverage
      uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: coverage_reports/*
    - name: Archive
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JOB_NAME }}
        path: dist/*
  all:
    name: All
    runs-on: ubuntu-latest
    needs:
    - check_workflow
    - test
    - check
    - freeze
    steps:
    - name: This
      shell: python
      run: 'import this

        '
